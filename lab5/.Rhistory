# Load libraries
packs=c("ggplot2", 'lmtest', 'reshape2', 'sandwich')
loadPkg(packs)
# Set a theme for gg
theme_set(theme_bw())
# Functions that I use frequently
char = function(x){ as.character(x) }
num = function(x){ as.numeric(char(x)) }
# Relevant paths
labPath='~/Dropbox/Duke/Spring 2015/PS 733/lab5/'
print("Model with Interaction Term")
lm2<-lm(fhrev~muslim + income + muslim:income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm2)$coefficients,3)
# Load data
fishPath=paste0(labPath, "fish.RData")
load(fishPath) # loads object named fish to environment
#Fish Model 4, Dep: fhrev. Indep: muslim, income, opec
print("Fish's Original Model")
lm1<-lm(fhrev~muslim + income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm1)$coefficients,3)
# Add interaction between muslim and income
print("Model with Interaction Term")
lm2<-lm(fhrev~muslim + income + muslim:income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm2)$coefficients,3)
attach(fish)
incomeRange=sort(income)
scen1=cbind(1, 1, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 1*incomeRange)
detach(fish)
# scenario 2: include all values of income, muslim=0, other vars at central tendency
attach(fish)
scen2=cbind(1, 0, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 0*incomeRange)
detach(fish)
# Pull out relevant regression parameters
coefs = coef(lm2)
# Calculate y hats
yhatScen1 = scen1 %*% coefs
yhatScen2 = scen2 %*% coefs
head(yhatScen1)
ggData=data.frame( rbind(
cbind(Income=incomeRange, FH=yhatScen1, Muslim=1),
cbind(Income=incomeRange, FH=yhatScen2, Muslim=0) ) )
colnames(ggData)[2]='FH'
head(ggData)
(ggData[2,'FH']-ggData[1,'FH'])/ggData[1,'FH']
(ggData[2,'FH']-ggData[1,'FH'])/(ggData[2,'Income']-ggData[1,'Income'])
(ggData[ggData$Muslim==1,'FH']-ggData[ggData$Muslim==1,'FH'])/(ggData[ggData$Muslim==1,'Income']-ggData[ggData$Muslim==1,'Income'])
head(ggData)
ggData[ggData$Muslim==1,'FH']
(ggData[ggData$Muslim==1,'FH']-ggData[ggData$Muslim==1,'FH'])
rm(list=ls())
# Function to load packages
loadPkg=function(toLoad){
for(lib in toLoad){
if(! lib %in% installed.packages()[,1])
{ install.packages(lib, repos='http://cran.rstudio.com/') }
suppressMessages( library(lib, character.only=TRUE) ) }
}
# Load libraries
packs=c("ggplot2", 'lmtest', 'reshape2', 'sandwich')
loadPkg(packs)
# Set a theme for gg
theme_set(theme_bw())
# Functions that I use frequently
char = function(x){ as.character(x) }
num = function(x){ as.numeric(char(x)) }
# Relevant paths
labPath='~/Dropbox/Duke/Spring 2015/PS 733/lab5/'
fishPath=paste0(labPath, "fish.RData")
load(fishPath) # loads object named fish to environment
head(fish)
fishPath=paste0(labPath, "fish.RData")
load(fishPath) # loads object named fish to environment
#Fish Model 4, Dep: fhrev. Indep: muslim, income, opec
print("Fish's Original Model")
lm1<-lm(fhrev~muslim + income + elf + growth + britcol + postcom + opec, data=fish)
summary(lm1)
summary(lm1)$coefficients
round(summary(lm1)$coefficients,3)
round(summary(lm1)$coefficients,3)
par(mfrow=c(2,2))
for(ii in 1:4){plot(lm1,ii)}
par(mfrow=c(1,1))
bptest(lm1)
coeftest(lm1)
coeftest(lm1, vcov=vcovHC(lm1, type='HC1'))
lm2 = lm(fhrev~muslim + income + muslim:income + elf + growth + britcol + postcom + opec, data=fish)
# Load data
fishPath=paste0(labPath, "fish.RData")
load(fishPath) # loads object named fish to environment
#Fish Model 4, Dep: fhrev. Indep: muslim, income, opec
print("Fish's Original Model")
lm1<-lm(fhrev~muslim + income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm1)$coefficients,3)
# Add interaction between muslim and income
print('Model with interaction')
lm2 = lm(fhrev~muslim + income + muslim:income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm1)$coefficients,3)
fishPath=paste0(labPath, "fish.RData")
load(fishPath) # loads object named fish to environment
#Fish Model 4, Dep: fhrev. Indep: muslim, income, opec
print("Fish's Original Model")
lm1<-lm(fhrev~muslim + income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm1)$coefficients,3)
# Add interaction between muslim and income
print('Model with interaction')
lm2 = lm(fhrev~muslim + income + muslim:income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm2)$coefficients,3)
anova(lm1, lm2)
lrtest(lm1, lm2)
?var.test
rmse = function(mod){
sqrt(mean(resid(mod)^2))
}
rmse(lm1)
rmse(lm2)
plot(lm2)
summary(fish$fhrev)
sd(fish$fhrev)
anova(mod1, mod2) # ftest
anova(lm1, lm2) # ftest
lrtest(lm1, lm2) # likelihood ratio test
incomeRange=sort(fish$income)
incomeRange
incomeRange
coefs(lm2)
coef(lm2)
class(coef(lm2))
musCoef=coef(lm2)['muslim']
musIncCoef=coef(lm2)['muslim:income']
musIncCoef
musCoef
partEffectMuslim=musCoef + musIncCoef * incomeRange
plot(incomeRange, partEffectMuslim, type='l')
demoRange=sort(fish$fhrev)
partEffectMuslim=musCoef + musIncCoef * demoRange
muslimRange=c(0,1)
partEffectIncome=incCoef + musIncCoef * muslimRange
incCoef=coef(lm2)['income']
partEffectIncome=incCoef + musIncCoef * muslimRange
plot(incomeRange, partEffectIncome, type='l')
plot(muslimRange, partEffectIncome, type='l')
plot(muslimRange, partEffectIncome)
plot(factor(muslimRange(), partEffectIncome)
plot(factor(muslimRange), partEffectIncome)
plot(factor(muslimRange), partEffectIncome)
par(mfrow=c(1,2))
plot(incomeRange, partEffectMuslim, type='l')
plot(factor(muslimRange), partEffectIncome)
par(mfrow=c(1,1))
incomeRange=sort(fish$income)
musCoef=coef(lm2)['muslim']
musIncCoef=coef(lm2)['muslim:income']
partEffectMuslim=musCoef + musIncCoef * incomeRange
# Partial effect of income on democracy by muslim
muslimRange=c(0,1)
incCoef=coef(lm2)['income']
partEffectIncome=incCoef + musIncCoef * muslimRange
par(mfrow=c(1,2))
plot(incomeRange, partEffectMuslim, type='l')
plot(factor(muslimRange), partEffectIncome)
par(mfrow=c(1,1))
attach(fish)
income
detach(fish)
fish$income
attach(fish)
incomeRange=sort(income)
incomeRange
coef(lm2)
attach(fish)
incomeRange=sort(income)
scen1=cbind(1, 1, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 1*incomeRange)
detach(fish)
head(scen1)
scen1
attach(fish)
scen2=cbind(1, 0, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 0*incomeRange)
detach(fish)
coef(lm2)
head(scen2)
coefs = coef(lm2)
coefs
dim(scen1)
length(coefs)
yhatScen1 = scen1 %*% coefs
dim(yhatScen12)
dim(yhatScen1)
dim(yhatScen1)
head(yhatScen1)
coefs
scen1[1,]
# scenario 1: include all values of income, muslim=1, other vars at central tendency
attach(fish)
incomeRange=sort(income)
scen1=cbind(1, 1, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 1*incomeRange)
detach(fish)
# scenario 2: include all values of income, muslim=0, other vars at central tendency
attach(fish)
scen2=cbind(1, 0, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 0*incomeRange)
detach(fish)
# Pull out relevant regression parameters
coefs = coef(lm2)
# Calculate y hats
yhatScen1 = scen1 %*% coefs
yhatScen2 = scen2 %*% coefs
# Create dataframe for plotting
ggData=data.frame( rbind(
cbind(Income=incomeRange, FH=yhatScen1, Muslim=1),
cbind(Income=incomeRange, FH=yhatScen2, Muslim=0) ) )
head(ggData)
colnames(ggData)[2]='FH'
head(ggData)
tmp=ggplot()
tmp=ggplot()
# Plotting our predicted values
tmp=tmp + geom_line(data=ggData, aes(x=Income, y=FH, color=factor(Muslim)))
tmp
tmp=ggplot()
# Plotting our predicted values
tmp=tmp + geom_line(data=ggData, aes(x=Income, y=FH, color=factor(Muslim)))
# Lets incorporate the actual data as well
tmp=tmp + geom_point(data=fish, aes(x=income, y=fhrev, color=factor(muslim)))
tmp
tmp=ggplot()
# Plotting our predicted values
tmp=tmp + geom_line(data=ggData, aes(x=Income, y=FH, color=factor(Muslim)))
# Lets incorporate the actual data as well
tmp=tmp + geom_point(data=fish, aes(x=income, y=fhrev, color=factor(muslim)))
# Relabel legend items
tmp=tmp + scale_color_discrete(breaks=c(0,1), labels=c('Non-Muslim', 'Muslim'))
# Relabel y-axis
tmp=tmp + scale_y_continuous(name='Freedom House Ratings \n (1=Least Free to 7=Most Free)',
limits=c(.9,7.1), breaks=seq(1, 7, 2), expand=c(0,0))
# Relabel x-axis
tmp=tmp + scale_x_continuous(name='Economic development \n (log GDP per capita in 1990)',
limits=c(2,4.7), breaks=seq(2,5,.5), expand=c(0,0))
# Clean up plot
tmp=tmp + theme(legend.position='top', legend.title=element_blank(),
axis.ticks=element_blank(), panel.border=element_blank(),
axis.title.y=element_text(vjust=2))
tmp
vcov(mod2)
vcov(lm2)
muslimRange=c(0,1)
muslimRange
coefs
effects = coefs['income'] + coefs['muslim:income']*muslimRange
vcov(lm2)['income','income']
vcov(lm2)['muslim:income','muslim:income']
vcov(lm2)['income','muslim:income']
muslimRange
ses = sqrt( vcov(lm2)['income','income'] + muslimRange^2*vcov(lm2)['muslim:income','muslim:income']+ 2*muslimRange*vcov(lm2)['income','muslim:income'] )
ses
upper = effects + 1.96*ses
lower = effects - 1.96*ses
effects
ses
ggEffect = data.frame(muslimRange, effects, ses, upper, lower)
ggEffect
incomeEffect=ggplot(ggEffect, aes(x=factor(muslimRange), y=effects, ymin=lower, ymax=upper))
incomeEffect=incomeEffect + geom_linerange() + geom_point()
incomeEffect=incomeEffect + geom_hline(aes(yintercept=0), color='red', linetype=2)
incomeEffect
# Lets calculate a vector of marginal effects
incomeRange=sort(fish$income)
effects = coefs['muslim'] + coefs['muslim:income']*incomeRange
# Lets calculate the standard error
varMus=vcov(lm2)['muslim','muslim']
varMusInc=vcov(lm2)['muslim:income', 'muslim:income']
covar=vcov(lm2)['muslim', 'muslim:income']
ses = sqrt( varMus + incomeRange^2 * varMusInc + 2*incomeRange*covar )
# Lets get the 95% confidence intervals
upper = effects + 1.96*ses
lower = effects - 1.96*ses
# Lets combine all this into a dataframe
ggEffect = data.frame(incomeRange, effects, ses, upper, lower)
head(ggEffect)
dim(ggEffect)
muslimEffect=ggplot(ggEffect, aes(x=incomeRange, y=effects, ymin=lower, ymax=upper))
muslimEffect=muslimEffect + geom_ribbon(fill='grey') + geom_line()
muslimEffect=muslimEffect + geom_hline(aes(yintercept=0), color='red', linetype=2)
muslimEffect=muslimEffect + geom_rug(sides='b', position='jitter')
muslimEffect
# Start with a clean workspace
rm(list=ls())
# Function to load packages
loadPkg=function(toLoad){
for(lib in toLoad){
if(! lib %in% installed.packages()[,1])
{ install.packages(lib, repos='http://cran.rstudio.com/') }
suppressMessages( library(lib, character.only=TRUE) ) }
}
# Load libraries
packs=c("ggplot2", 'lmtest', 'reshape2', 'sandwich')
loadPkg(packs)
# Set a theme for gg
theme_set(theme_bw())
# Functions that I use frequently
char = function(x){ as.character(x) }
num = function(x){ as.numeric(char(x)) }
# Relevant paths
labPath='~/Dropbox/Duke/Spring 2015/PS 733/lab5/'
# Load data
fishPath=paste0(labPath, "fish.RData")
load(fishPath) # loads object named fish to environment
#Fish Model 4, Dep: fhrev. Indep: muslim, income, opec
print("Fish's Original Model")
lm1<-lm(fhrev~muslim + income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm1)$coefficients,3)
# Add interaction between muslim and income
print("Model with Interaction Term")
lm2<-lm(fhrev~muslim + income + muslim*income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm2)$coefficients,3)
# Did adding the interaction improve the fit of the model
# Lets check using the RMSE
rmse = function(mod){ sqrt(mean(resid(mod)^2)) }
print(paste0('RMSE under Model without the Ineraction Term: ', round(rmse(lm1),3)))
print(paste0('RMSE under Model with the Ineraction Term: ', round(rmse(lm2),3)))
# Lets use some of the other diagnostics we have learned as well
# F test
anova(lm1, lm2)
# Likelihood Ratio test
lrtest(lm1, lm2)
summary(lm2)
attach(fish)
incomeRange=sort(income)
scen1=cbind(1, 1, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 1*incomeRange)
detach(fish)
# scenario 2: include all values of income, muslim=0, other vars at central tendency
attach(fish)
scen2=cbind(1, 0, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 0*incomeRange)
detach(fish)
# Pull out relevant regression parameters
coefs = coef(lm2)
# Calculate y hats
yhatScen1 = scen1 %*% coefs
yhatScen2 = scen2 %*% coefs
# Create dataframe for plotting
ggData=data.frame( rbind(
cbind(Income=incomeRange, FH=yhatScen1, Muslim=1),
cbind(Income=incomeRange, FH=yhatScen2, Muslim=0) ) )
colnames(ggData)[2]='FH'
# Reshape data
tmp=ggplot()
# Plotting our predicted values
tmp=tmp + geom_line(data=ggData, aes(x=Income, y=FH, color=factor(Muslim)))
# Lets incorporate the actual data as well
tmp=tmp + geom_point(data=fish, aes(x=income, y=fhrev, color=factor(muslim)))
# Relabel legend items
tmp=tmp + scale_color_discrete(breaks=c(0,1), labels=c('Non-Muslim', 'Muslim'))
# Relabel y-axis
tmp=tmp + scale_y_continuous(name='Freedom House Ratings \n (1=Least Free to 7=Most Free)',
limits=c(.9,7.1), breaks=seq(1, 7, 2), expand=c(0,0))
# Relabel x-axis
tmp=tmp + scale_x_continuous(name='Economic development \n (log GDP per capita in 1990)',
limits=c(2,4.7), breaks=seq(2,5,.5), expand=c(0,0))
# Clean up plot
tmp=tmp + theme(legend.position='top', legend.title=element_blank(),
axis.ticks=element_blank(), panel.border=element_blank(),
axis.title.y=element_text(vjust=2))
tmp
muslimRange=c(0,1)
effects = coefs['income'] + coefs['muslim:income']*muslimRange
# Lets calculate the standard error
ses = sqrt( vcov(lm2)['income','income'] + muslimRange^2*vcov(lm2)['muslim:income','muslim:income']+ 2*muslimRange*vcov(lm2)['income','muslim:income'] )
# Lets get the 95% confidence intervals
upper = effects + 1.96*ses
lower = effects - 1.96*ses
# Lets combine all this into a dataframe
ggEffect = data.frame(muslimRange, effects, ses, upper, lower)
# Lets plot this
incomeEffect=ggplot(ggEffect, aes(x=factor(muslimRange), y=effects, ymin=lower, ymax=upper))
incomeEffect=incomeEffect + geom_linerange() + geom_point()
incomeEffect=incomeEffect + geom_hline(aes(yintercept=0), color='red', linetype=2)
incomeEffect
effects = coefs['muslim'] + coefs['muslim:income']*incomeRange
# Lets calculate the standard error
ses = sqrt( vcov(lm2)['muslim','muslim'] + incomeRange^2*vcov(lm2)['muslim:income','muslim:income']+ 2*incomeRange*vcov(lm2)['muslim','muslim:income'] )
# Lets get the 95% confidence intervals
upper = effects + 1.96*ses
lower = effects - 1.96*ses
# Lets combine all this into a dataframe
ggEffect = data.frame(incomeRange, effects, ses, upper, lower)
# Lets plot this
muslimEffect=ggplot(ggEffect, aes(x=incomeRange, y=effects, ymin=lower, ymax=upper))
muslimEffect=muslimEffect + geom_ribbon(fill='grey') + geom_line()
muslimEffect=muslimEffect + geom_hline(aes(yintercept=0), color='red', linetype=2)
muslimEffect=muslimEffect + geom_rug(sides='b', position='jitter')
muslimEffect
scen1=data.frame(scen1)
scen2=data.frame(scen2)
colnames(scen1)=colnames(model.matrix(lm2))
colnames(scen2)=colnames(model.matrix(lm2))
# Calculate y hats with confidence intervals
yhatScen1 = predict(lm2, newdata=scen1, interval='confidence')
yhatScen2 = predict(lm2, newdata=scen2, interval='confidence')
# Lets combine these results into a dataframe so that we can
## add them to our plot
ggRibbData=data.frame(rbind(
cbind(Income=incomeRange, Muslim=1, yhatScen1),
cbind(Income=incomeRange, Muslim=0, yhatScen2) ), row.names=NULL )
# Lets add the confidence intervals to our plot
tmp2=tmp
tmp2=tmp2 + geom_ribbon(data=ggRibbData, alpha=0.5,
aes(fill=factor(Muslim), ymin=lwr, ymax=upr, x=Income))
tmp2=tmp2 + scale_fill_discrete(guide='none')
tmp2
rm(list=ls())
# Function to load packages
loadPkg=function(toLoad){
for(lib in toLoad){
if(! lib %in% installed.packages()[,1])
{ install.packages(lib, repos='http://cran.rstudio.com/') }
suppressMessages( library(lib, character.only=TRUE) ) }
}
# Load libraries
packs=c("ggplot2", 'lmtest', 'reshape2', 'sandwich')
loadPkg(packs)
# Set a theme for gg
theme_set(theme_bw())
# Functions that I use frequently
char = function(x){ as.character(x) }
num = function(x){ as.numeric(char(x)) }
# Relevant paths
labPath='~/Dropbox/Duke/Spring 2015/PS 733/lab5/'
fishPath=paste0(labPath, "fish.RData")
load(fishPath) # loads object named fish to environment
#Fish Model 4, Dep: fhrev. Indep: muslim, income, opec
print("Fish's Original Model")
lm1<-lm(fhrev~muslim + income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm1)$coefficients,3)
# Add interaction between muslim and income
print("Model with Interaction Term")
lm2<-lm(fhrev~muslim + income + muslim*income + elf + growth + britcol + postcom + opec, data=fish)
round(summary(lm2)$coefficients,3)
# Did adding the interaction improve the fit of the model
# Lets check using the RMSE
rmse = function(mod){ sqrt(mean(resid(mod)^2)) }
print(paste0('RMSE under Model without the Ineraction Term: ', round(rmse(lm1),3)))
print(paste0('RMSE under Model with the Ineraction Term: ', round(rmse(lm2),3)))
# Lets use some of the other diagnostics we have learned as well
# F test
anova(lm1, lm2)
# Likelihood Ratio test
lrtest(lm1, lm2)
attach(fish)
incomeRange=sort(income)
scen1=cbind(1, 1, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 1*incomeRange)
detach(fish)
# scenario 2: include all values of income, muslim=0, other vars at central tendency
attach(fish)
scen2=cbind(1, 0, incomeRange, mean(elf), mean(growth), median(britcol), median(postcom), median(opec), 0*incomeRange)
detach(fish)
# Pull out relevant regression parameters
coefs = coef(lm2)
# Calculate y hats
yhatScen1 = scen1 %*% coefs
yhatScen2 = scen2 %*% coefs
# Create dataframe for plotting
ggData=data.frame( rbind(
cbind(Income=incomeRange, FH=yhatScen1, Muslim=1),
cbind(Income=incomeRange, FH=yhatScen2, Muslim=0) ) )
colnames(ggData)[2]='FH'
# Reshape data
tmp=ggplot()
# Plotting our predicted values
tmp=tmp + geom_line(data=ggData, aes(x=Income, y=FH, color=factor(Muslim)))
# Lets incorporate the actual data as well
tmp=tmp + geom_point(data=fish, aes(x=income, y=fhrev, color=factor(muslim)))
# Relabel legend items
tmp=tmp + scale_color_discrete(breaks=c(0,1), labels=c('Non-Muslim', 'Muslim'))
# Relabel y-axis
tmp=tmp + scale_y_continuous(name='Freedom House Ratings \n (1=Least Free to 7=Most Free)',
limits=c(.9,7.1), breaks=seq(1, 7, 2), expand=c(0,0))
# Relabel x-axis
tmp=tmp + scale_x_continuous(name='Economic development \n (log GDP per capita in 1990)',
limits=c(2,4.7), breaks=seq(2,5,.5), expand=c(0,0))
# Clean up plot
tmp=tmp + theme(legend.position='top', legend.title=element_blank(),
axis.ticks=element_blank(), panel.border=element_blank(),
axis.title.y=element_text(vjust=2))
tmp
muslimRange=c(0,1)
effects = coefs['income'] + coefs['muslim:income']*muslimRange
# Lets calculate the standard error
ses = sqrt( vcov(lm2)['income','income'] + muslimRange^2*vcov(lm2)['muslim:income','muslim:income']+ 2*muslimRange*vcov(lm2)['income','muslim:income'] )
# Lets get the 95% confidence intervals
upper = effects + 1.96*ses
lower = effects - 1.96*ses
# Lets combine all this into a dataframe
ggEffect = data.frame(muslimRange, effects, ses, upper, lower)
# Lets plot this
incomeEffect=ggplot(ggEffect, aes(x=factor(muslimRange), y=effects, ymin=lower, ymax=upper))
incomeEffect=incomeEffect + geom_linerange() + geom_point()
incomeEffect=incomeEffect + geom_hline(aes(yintercept=0), color='red', linetype=2)
incomeEffect
effects = coefs['muslim'] + coefs['muslim:income']*incomeRange
# Lets calculate the standard error
ses = sqrt( vcov(lm2)['muslim','muslim'] + incomeRange^2*vcov(lm2)['muslim:income','muslim:income']+ 2*incomeRange*vcov(lm2)['muslim','muslim:income'] )
# Lets get the 95% confidence intervals
upper = effects + 1.96*ses
lower = effects - 1.96*ses
# Lets combine all this into a dataframe
ggEffect = data.frame(incomeRange, effects, ses, upper, lower)
# Lets plot this
muslimEffect=ggplot(ggEffect, aes(x=incomeRange, y=effects, ymin=lower, ymax=upper))
muslimEffect=muslimEffect + geom_ribbon(fill='grey') + geom_line()
muslimEffect=muslimEffect + geom_hline(aes(yintercept=0), color='red', linetype=2)
muslimEffect=muslimEffect + geom_rug(sides='b', position='jitter')
muslimEffect
source('~/.active-rstudio-document', echo=TRUE)
head(ggRibbData)
