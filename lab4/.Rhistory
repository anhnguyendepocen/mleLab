names(attributes(cshp12))
check=attributes(cshp12)$polygons
check=coordinates(attributes(cshp12)$polygons)
attributes(cshp12)$class
?coordinates
coordinates(cshp12)
coords=coordinates(cshp12)
coords=coordinates(cshp12)
chsp12nb=poly2nb(cshp12)
chsp12nbBin=nb2listw(chsp12nb, style="W", zero.policy=TRUE)
plot(chsp12nbBin,coords=coords,pch=19, cex=0.1, col="gray")
moran.test(fdi$fdi, listw=W_cont_el_mat, zero.policy=T)
moran.test(fdi$fdi, listw=chsp12nbBin, zero.policy=T)
dim(chsp12nbBin)
class(chsp12nbBin)
chsp12nbBin
chsp12nbBin$listw
chsp12nbBin$nb
attributes(chsp12nbBin)
cshp10 = cshp(date=as.Date('2010-1-1'), useGW=TRUE)
coords=coordinates(cshp10)
cshp10nb=poly2nb(cshp10)
cshp10nbBin=nb2listw(cshp10nb, style="W", zero.policy=TRUE)
# Plot centroid connections
plot(cshp10nbBin,coords=coords,pch=19, cex=0.1, col="gray")
attributes(cshp10)
matches
cshp10 = cshp10[which(cshp10$COWCODE %in% matches),]
?poly2nb
coords=coordinates(cshp10)
cshp10nb=poly2nb(cshp10)
cshp10nbBin=nb2listw(cshp10nb, style="W", zero.policy=TRUE)
# Plot centroid connections
plot(cshp10nbBin,coords=coords,pch=19, cex=0.1, col="gray")
moran.test(fdi$fdi, listw=chsp12nbBin, zero.policy=T)
moran.test(fdi$fdi, listw=chsp10nbBin, zero.policy=T)
cshp10 = cshp(date=as.Date('2010-1-1'), useGW=TRUE)
# Remove polygons from cshp10
cshp10 = cshp10[which(cshp10$COWCODE %in% matches),]
# Centroid coordinates
coords=coordinates(cshp10)
# Get list of neighbors
cshp10nb=poly2nb(cshp10)
cshp10nbBin=nb2listw(cshp10nb, style="W", zero.policy=TRUE)
# Plot centroid connections
plot(cshp10nbBin,coords=coords,pch=19, cex=0.1, col="gray")
moran.test(fdi$fdi, listw=chsp10nbBin, zero.policy=T)
moran.test(fdi$fdi, listw=cshp10nbBin, zero.policy=T)
plot(cshp10)
cshp10$COWCODE
matches
cshp10 = cshp(date=as.Date('2010-1-1'), useGW=TRUE)
coords=coordinates(cshp10)
dim(coords)
cshp10 = cshp10[which(cshp10$COWCODE %in% matches),]
coords=coordinates(cshp10)
dim(coords)
cshp00 = cshp(date=as.Date('2000-1-1'), useGW=TRUE)
# Remove polygons from cshp00
cshp00 = cshp00[which(cshp00$COWCODE %in% matches),]
# Centroid coordinates
coords=coordinates(cshp00)
# Get list of neighbors
cshp00nb=poly2nb(cshp00)
cshp00nbBin=nb2listw(cshp00nb, style="W", zero.policy=TRUE)
# Plot centroid connections
plot(cshp00nbBin,coords=coords,pch=19, cex=0.1, col="gray")
moran.test(fdi$fdi, listw=cshp00nbBin, zero.policy=T)
dim(coords)
dim(poly2nb)
dim(cshp00nb)
dim(cshp00nBin)
dim(cshp00nbBin)
cshp00nbBin
cshp00nb=poly2nb(cshp00, queen=TRUE, zero.policy=TRUE)
cshp00nb=poly2nb(cshp00, queen=TRUE)
cshp00nbBin=nb2listw(cshp00nb, style="W", zero.policy=TRUE)
plot(cshp00nbBin,coords=coords,pch=19, cex=0.1, col="gray")
plot(cshp00)
lines(cshp00nbBin,coords=coords,pch=19, cex=0.1, col="gray")
plot(cshp00nbBin,coords=coords,pch=19, cex=0.1, col="gray")
dim(fdi)
capdist=distmatrix(as.Date('2000-1-1'), type='capdist',  tolerance=0.5, useGW=FALSE)
capdist[1:5, 1:5]
# lets see if we can calculate Moran's I for FDI
# lets focus on 2000 data
fdi=wbData[which(wbData$year == 2000), c('cname', 'iso3c', 'fdi')]
fdi=na.omit(fdi)
# Lets match countries with values in distance matrix
# First we need to get ccodes for the fdi dataset because that is what is used
# in our distance matrix
fdi$ccode=panel$ccode[match(toupper(fdi$cname), panel$cname)]
# Some countries did not match, lets just drop 'em
sum(is.na(fdi$ccode))
fdi=na.omit(fdi)
# Reorder rows of fdi dataframe
fdi=fdi[order(fdi$ccode),]
# Now lets isolate the fdi and capdist matrix to only
# countries that exist in both objects
matches=intersect(fdi$ccode, rownames(capdist))
fdi=fdi[which(fdi$ccode %in% matches),]
capdist=capdist[matches, matches]
# Like the example above we have to invert the distance matrix
invcapdist = 1/capdist
diag(invcapdist) = 0
# Now lets Moran's test
Moran.I(fdi$fdi, invcapdist)
dim(capdist)
dim(fdi)
cshp00 = cshp(date=as.Date('2000-1-1'), useGW=TRUE)
# Remove polygons from cshp00
cshp00 = cshp00[which(cshp00$COWCODE %in% matches),]
# Centroid coordinates
coords=coordinates(cshp00)
# Get list of neighbors
cshp00nb=poly2nb(cshp00, queen=TRUE)
cshp00nbBin=nb2listw(cshp00nb, style="W", zero.policy=TRUE)
# Plot centroid connections
plot(cshp00nbBin,coords=coords,pch=19, cex=0.1, col="gray")
moran.test(fdi$fdi, listw=cshp00nbBin, zero.policy=T)
# Moran plot
moran.plot(fdi$fdi, listw=cshp00nbBin, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5, quiet=F, labels=as.character(data$NAME),xlab="FDI", ylab="FDI (Spatial Lag)", main="Moran Scatterplot")
moran.plot(fdi$fdi, listw=cshp00nbBin, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5, quiet=F, labels=as.character(fdi$cname),xlab="FDI", ylab="FDI (Spatial Lag)", main="Moran Scatterplot")
moran.plot(fdi$fdi, listw=cshp00nbBin, zero.policy=T, pch=16, col="black",cex=.5, quiet=F, labels=as.character(fdi$cname),xlab="FDI", ylab="FDI (Spatial Lag)", main="Moran Scatterplot")
lm1 <- localmoran(fdi$fdi, listw=cshp00nbBin, zero.policy=T)
data$lm1 <- abs(lm1[,4]) ## Extract z-scores
lm1 <- localmoran(fdi$fdi, listw=cshp00nbBin, zero.policy=T)
fdi$lm1 <- abs(lm1[,4]) ## Extract z-scores
lm.palette <- colorRampPalette(c("white","orange", "red"), space = "rgb")
spplot(fdi, zcol="lm1", col.regions=lm.palette(20), main="Local Moran's I (|z| scores)", pretty=T)
lm1 <- localmoran(fdi$fdi, listw=cshp00nbBin, zero.policy=T)
fdi$lm1 <- abs(lm1[,4]) ## Extract z-scores
lm.palette <- colorRampPalette(c("white","orange", "red"), space = "rgb")
spplot(fdi, zcol="lm1", col.regions=lm.palette(20), main="Local Moran's I (|z| scores)", pretty=T)
install.packages('gpclibn')
install.packages('gpclib')
install.packages("gpclib")
setwd('~/Downloads')
install.packages('gpclib_1.5-5.tar.gz', repos=NULL, type='source')
packs=c("ggplot2", 'lmtest', 'WDI', 'countrycode', 'RColorBrewer',
'cshapes', 'ape', 'grid', 'spdep')
loadPkg(packs)
theme_set(theme_bw())
# Functions that I use frequently
char = function(x){ as.character(x) }
num = function(x){ as.numeric(char(x)) }
# Relevant paths
labPath='~/Dropbox/Duke/Spring 2015/PS 733/lab4'
wbVars=c("BX.KLT.DINV.CD.WD","SP.POP.TOTL", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.PCAP.KD", "NY.GDP.MKTP.KD.ZG")
wbData=WDI(country='all', indicator=wbVars,
start=1988, end=2010, extra=T)
names(wbData)[4:8]=c('fdi', 'population', 'inflation', 'gdpCap', 'gdpGr')
head(wbData)
hist(wbData$fdi)
plot(density(wbData$fdi))
plot(density(wbData$fdi, na.rm=TRUE))
summary(wbData$fdi)
wbData$fdi = log(wbData$fdi + abs(min(wbData$fdi, na.rm=T)) + 1)
plot(density(wbData$fdi, na.rm=TRUE))
plot(density(wbData[wbData$year==2000,'fdi'], na.rm=TRUE))
wbVars=c("BX.KLT.DINV.CD.WD","SP.POP.TOTL", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.PCAP.KD", "NY.GDP.MKTP.KD.ZG")
wbData=WDI(country='all', indicator=wbVars,
start=1988, end=2010, extra=T)
names(wbData)[4:8]=c('fdi', 'population', 'inflation', 'gdpCap', 'gdpGr')
# log everything
# wbData$fdi = log(wbData$fdi + abs(min(wbData$fdi, na.rm=T)) + 1)
# wbData$population = log(wbData$population + abs(min(wbData$population, na.rm=T)) + 1)
# wbData$gdpCap = log(wbData$gdpCap + abs(min(wbData$gdpCap, na.rm=T)) + 1)
# take a peak at your data
head(wbData)
wbData$cname = countrycode(wbData$iso2c, 'iso2c', 'country.name')
head(wbData)
wbData = wbData[!is.na(wbData$cname),]
unique(wbData[,c('country', 'iso2c', 'cname')])
?countrycode
countrycode(c('North Yemen', 'South Yemen'), 'country.name', 'cown')
head(panel)
unique(panel$CNTRY_NAME)
wbData$cname = countrycode(wbData$iso2c, 'iso2c', 'country.name')
wbData = wbData[!is.na(wbData$cname),]
head(wbData)
unique(wbData$cname)
modData=na.omit(wbData[,c('fdi', 'population', 'inflation', 'gdpCap', 'gdpGr','year', 'cname')])
head(modData)
dim(wbData); dim(modData)
modData=modData[which(modData$cname=='China'),]
mod1=lm(fdi ~ population + inflation + gdpCap + gdpGr, data=modData)
summary(mod1)
dwtest(mod1)
bgtest(mod1)
check=data.frame(pred=mod1$fitted.values, res=mod1$residuals, yr=modData$year)
ggplot(check, aes(x=pred, y=res, color=yr)) + geom_point()
ggplot(check, aes(x=pred, y=res, color=yr)) + geom_point()
ggplot(check, aes(x=pred, y=res, color=yr)) + geom_point()
ggplot(check, aes(x=pred, y=res, color=yr)) + geom_point(size=5)
ggplot(check, aes(x=yr, y=res)) + geom_point()
ggplot(check, aes(x=yr, y=res)) + geom_point(size=5)
wbVars=c("BX.KLT.DINV.CD.WD","SP.POP.TOTL", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.PCAP.KD", "NY.GDP.MKTP.KD.ZG")
wbData=WDI(country='all', indicator=wbVars,
start=1988, end=2010, extra=T)
names(wbData)[4:8]=c('fdi', 'population', 'inflation', 'gdpCap', 'gdpGr')
# log everything
wbData$fdi = log(wbData$fdi + abs(min(wbData$fdi, na.rm=T)) + 1)
wbData$population = log(wbData$population + abs(min(wbData$population, na.rm=T)) + 1)
wbData$gdpCap = log(wbData$gdpCap + abs(min(wbData$gdpCap, na.rm=T)) + 1)
# take a peak at your data
head(wbData)
# Lets throw out non country units
wbData$cname = countrycode(wbData$iso2c, 'iso2c', 'country.name')
wbData = wbData[!is.na(wbData$cname),]
head(wbData)
unique(wbData$cname)
# Good lets construct some model for FDI
modData=na.omit(wbData[,c('fdi', 'population', 'inflation', 'gdpCap', 'gdpGr','year', 'cname')])
dim(wbData); dim(modData)
modData=modData[which(modData$cname=='China'),]
mod1=lm(fdi ~ population + inflation + gdpCap + gdpGr, data=modData)
summary(mod1)
# from lmtest lets examine serial correlation using dwtest and bgtest
dwtest(mod1)
bgtest(mod1)
# Visualize residuals versus fitted values
check=data.frame(pred=mod1$fitted.values, res=mod1$residuals, yr=modData$year)
# Add some color
ggplot(check, aes(x=pred, y=res, color=yr)) + geom_point(size=5)
setwd(labPath)
load('panel.rda')
head(panel)
capdist=distmatrix(as.Date('2000-1-1'), type='capdist',  tolerance=0.5, useGW=FALSE)
capdist[1:5, 1:5]
dim(capdist)
fdi=wbData[which(wbData$year == 2000), c('cname', 'iso3c', 'fdi')]
fdi=na.omit(fdi)
fdi$ccode=panel$ccode[match(toupper(fdi$cname), panel$cname)]
sum(is.na(fdi$ccode))
fdi=na.omit(fdi)
fdi=fdi[order(fdi$ccode),]
head(fdi)
intersect(1:3, 1:10)
matches=intersect(fdi$ccode, rownames(capdist))
length(matches)
fdi=fdi[which(fdi$ccode %in% matches),]
capdist[1:5,1:5]
head(matches)
dim(capdist)
capdist=capdist[matches, matches]
dim(capdist)
capdist[1:5,1:5]
head(fdi)
invcapdist = 1/capdist
invcapdist[1:5,1:5]
diag(invcapdist) = 0
invcapdist[1:5,1:5]
Moran.I(fdi$fdi, invcapdist)
cshp00 = cshp(date=as.Date('2000-1-1'), useGW=TRUE)
class(cshp00)
names(attributes(cshp00))
attributes(cshp00)$data[1:5,]
plot(cshp00)
matches
cshp00$COWCODE
cshp00 = cshp00[which(cshp00$COWCODE %in% matches),]
coords=coordinates(cshp00)
cshp00nb=poly2nb(cshp00, queen=TRUE)
cshp00nbBin=nb2listw(cshp00nb, style="W", zero.policy=TRUE)
plot(cshp00nbBin,coords=coords,pch=19, cex=0.1, col="gray")
moran.test(fdi$fdi, listw=cshp00nbBin, zero.policy=T)
moran.plot(fdi$fdi, listw=cshp00nbBin, zero.policy=T, pch=16, col="black",cex=.5, quiet=F, labels=as.character(fdi$cname),xlab="FDI", ylab="FDI (Spatial Lag)", main="Moran Scatterplot")
gpclibPermit()
cshp12 = cshp(date=as.Date('2012-1-1'), useGW=TRUE)
plot(cshp12)
pakCode=countrycode('Pakistan', 'country.name', 'cown')
pakMap = cshp12[cshp12$COWCODE==pakCode,]
plot(pakMap)
setwd(labPath)
load('panel.rda')
load("cityTotPopLatLongvFinal.rda")
prioData=read.csv("ConflictSite 4-2010_v3 Dataset.csv")
# Clean prio data
prioData$Conflict.territory=char(prioData$Conflict.territory)
prioData$Conflict.territory[prioData$Conflict.territory=='Yugoslavia']='Serbia'
prioData$Conflict.territory[prioData$Conflict.territory=='DRC']='Democratic Republic of Congo'
prioData$cname=countrycode(prioData$Conflict.territory, 'country.name','country.name')
cntries=unique(prioData$cname)
# Color Non-Conflict countries
worldmap=cshp(as.Date('2000-1-1'))
worldmap$CNTRY_NAME=char(worldmap$CNTRY_NAME)
worldmap$CNTRY_NAME[worldmap$CNTRY_NAME=='Congo, DRC']='Congo, Democratic Republic of'
Wcntries=worldmap$CNTRY_NAME
Wcntries=panel$cname[match(Wcntries, panel$CNTRY_NAME)]
noConfCntries=setdiff(Wcntries, toupper(cntries))
mapColors=rep('white',length(Wcntries))
mapColors[which(Wcntries %in% noConfCntries)] = 'grey'
# Plot
plot(worldmap, col=mapColors)
points(fYrCty$cleanLong, fYrCty$cleanLat, col='blue', pch=18, cex=0.5)
points(prioData$Longitude,prioData$Latitude, col='red', pch=16,cex=0.5)
setwd(labPath)
load('panel.rda')
load("cityTotPopLatLongvFinal.rda")
prioData=read.csv("ConflictSite 4-2010_v3 Dataset.csv")
head(prioData)
head(fYrCty)
class(prioData$Conflict.territory)
prioData$Conflict.territory=char(prioData$Conflict.territory)
prioData$Conflict.territory[prioData$Conflict.territory=='Yugoslavia']='Serbia'
prioData$Conflict.territory[prioData$Conflict.territory=='DRC']='Democratic Republic of Congo'
prioData$cname=toupper(countrycode(prioData$Conflict.territory, 'country.name','country.name'))
cntries=unique(prioData$cname)
cntries
worldmap=cshp(as.Date('2000-1-1'))
worldmap$CNTRY_NAME=char(worldmap$CNTRY_NAME)
worldmap$CNTRY_NAME[worldmap$CNTRY_NAME=='Congo, DRC']='Congo, Democratic Republic of'
Wcntries=worldmap$CNTRY_NAME
Wcntries
Wcntries=panel$cname[match(Wcntries, panel$CNTRY_NAME)]
noConfCntries=setdiff(Wcntries, cntries)
noConfCntries
setwd(labPath)
load('panel.rda') # inputs df named 'panel'
load("cityTotPopLatLongvFinal.rda") # inputs df named 'fYrCty'
prioData=read.csv("ConflictSite 4-2010_v3 Dataset.csv")
# Clean prio data
prioData$Conflict.territory=char(prioData$Conflict.territory)
prioData$Conflict.territory[prioData$Conflict.territory=='Yugoslavia']='Serbia'
prioData$Conflict.territory[prioData$Conflict.territory=='DRC']='Democratic Republic of Congo'
prioData$cname=countrycode(prioData$Conflict.territory, 'country.name','country.name')
cntries=unique(prioData$cname)
# Color Non-Conflict countries
worldmap=cshp(as.Date('2000-1-1'))
worldmap$CNTRY_NAME=char(worldmap$CNTRY_NAME)
worldmap$CNTRY_NAME[worldmap$CNTRY_NAME=='Congo, DRC']='Congo, Democratic Republic of'
Wcntries=worldmap$CNTRY_NAME
Wcntries=panel$cname[match(Wcntries, panel$CNTRY_NAME)]
noConfCntries=setdiff(Wcntries, cntries)
noConfCntries
setwd(labPath)
load('panel.rda') # inputs df named 'panel'
load("cityTotPopLatLongvFinal.rda") # inputs df named 'fYrCty'
prioData=read.csv("ConflictSite 4-2010_v3 Dataset.csv")
# Clean prio data
prioData$Conflict.territory=char(prioData$Conflict.territory)
prioData$Conflict.territory[prioData$Conflict.territory=='Yugoslavia']='Serbia'
prioData$Conflict.territory[prioData$Conflict.territory=='DRC']='Democratic Republic of Congo'
prioData$cname=countrycode(prioData$Conflict.territory, 'country.name','country.name')
cntries=unique(prioData$cname)
# Color Non-Conflict countries
worldmap=cshp(as.Date('2000-1-1'))
worldmap$CNTRY_NAME=char(worldmap$CNTRY_NAME)
worldmap$CNTRY_NAME[worldmap$CNTRY_NAME=='Congo, DRC']='Congo, Democratic Republic of'
Wcntries=worldmap$CNTRY_NAME
Wcntries=panel$cname[match(Wcntries, panel$CNTRY_NAME)]
noConfCntries=setdiff(Wcntries, cntries)
noConfCntries
mapColors=rep('white',length(Wcntries))
mapColors[which(Wcntries %in% noConfCntries)] = 'grey'
mapColors
# Lets make a cooler plot
setwd(labPath)
load('panel.rda') # inputs df named 'panel'
load("cityTotPopLatLongvFinal.rda") # inputs df named 'fYrCty'
prioData=read.csv("ConflictSite 4-2010_v3 Dataset.csv")
# Clean prio data
prioData$Conflict.territory=char(prioData$Conflict.territory)
prioData$Conflict.territory[prioData$Conflict.territory=='Yugoslavia']='Serbia'
prioData$Conflict.territory[prioData$Conflict.territory=='DRC']='Democratic Republic of Congo'
prioData$cname=countrycode(prioData$Conflict.territory, 'country.name','country.name')
cntries=unique(prioData$cname)
# Color Non-Conflict countries
worldmap=cshp(as.Date('2000-1-1'))
worldmap$CNTRY_NAME=char(worldmap$CNTRY_NAME)
worldmap$CNTRY_NAME[worldmap$CNTRY_NAME=='Congo, DRC']='Congo, Democratic Republic of'
Wcntries=worldmap$CNTRY_NAME
Wcntries=panel$cname[match(Wcntries, panel$CNTRY_NAME)]
noConfCntries=setdiff(Wcntries, toupper(cntries))
mapColors=rep('white',length(Wcntries))
mapColors[which(Wcntries %in% noConfCntries)] = 'grey'
mapColors
plot(worldmap, col=mapColors)
points(fYrCty$cleanLong, fYrCty$cleanLat, col='blue', pch=18, cex=0.5)
points(prioData$Longitude,prioData$Latitude, col='red', pch=16,cex=0.5)
# Start with a clean workspace
rm(list=ls())
# Function to load packages
loadPkg=function(toLoad){
for(lib in toLoad){
if(! lib %in% installed.packages()[,1])
{ install.packages(lib, repos='http://cran.rstudio.com/') }
suppressMessages( library(lib, character.only=TRUE) ) }
}
# Load libraries
# 'gpclib',
packs=c("ggplot2", 'lmtest', 'WDI', 'countrycode', 'RColorBrewer',
'cshapes', 'ape', 'grid', 'spdep')
loadPkg(packs)
# Set a theme for gg
theme_set(theme_bw())
# Functions that I use frequently
char = function(x){ as.character(x) }
num = function(x){ as.numeric(char(x)) }
# Relevant paths
labPath='~/Dropbox/Duke/Spring 2015/PS 733/lab4'
wbVars=c("BX.KLT.DINV.CD.WD","SP.POP.TOTL", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.PCAP.KD", "NY.GDP.MKTP.KD.ZG")
wbData=WDI(country='all', indicator=wbVars,
start=1988, end=2010, extra=T)
names(wbData)[4:8]=c('fdi', 'population', 'inflation', 'gdpCap', 'gdpGr')
# log everything
wbData$fdi = log(wbData$fdi + abs(min(wbData$fdi, na.rm=T)) + 1)
wbData$population = log(wbData$population + abs(min(wbData$population, na.rm=T)) + 1)
wbData$gdpCap = log(wbData$gdpCap + abs(min(wbData$gdpCap, na.rm=T)) + 1)
# take a peak at your data
head(wbData)
# Lets throw out non country units
wbData$cname = countrycode(wbData$iso2c, 'iso2c', 'country.name')
wbData = wbData[!is.na(wbData$cname),]
head(wbData)
unique(wbData$cname)
# Good lets construct some model for FDI
modData=na.omit(wbData[,c('fdi', 'population', 'inflation', 'gdpCap', 'gdpGr','year', 'cname')])
dim(wbData); dim(modData)
modData=modData[which(modData$cname=='China'),]
mod1=lm(fdi ~ population + inflation + gdpCap + gdpGr, data=modData)
summary(mod1)
# from lmtest lets examine serial correlation using dwtest and bgtest
dwtest(mod1)
bgtest(mod1)
# Visualize residuals versus fitted values
check=data.frame(pred=mod1$fitted.values, res=mod1$residuals, yr=modData$year)
# Add some color
ggplot(check, aes(x=pred, y=res, color=yr)) + geom_point(size=5)
ggplot(check, aes(x=yr, y=res)) + geom_point(size=5)
# Lets add a line for the mean
meanres=data.frame(mean=tapply(check$res, check$yr, FUN=mean ), yr=sort(unique(check$yr)) )
ggplot(check, aes(x=yr, y=res)) + geom_point() + geom_line(data=meanres, aes(x=yr,y=mean))
dwtest
bptest
setwd(labPath)
load('panel.rda')
# Finding distances
capdist=distmatrix(as.Date('2000-1-1'), type='capdist', tolerance=0.5, useGW=FALSE)
capdist[1:5, 1:5]
# lets see if we can calculate Moran's I for FDI
# lets focus on 2000 data
fdi=wbData[which(wbData$year == 2000), c('cname', 'iso3c', 'fdi')]
fdi=na.omit(fdi)
# Lets match countries with values in distance matrix
# First we need to get ccodes for the fdi dataset because that is what is used
# in our distance matrix
fdi$ccode=panel$ccode[match(toupper(fdi$cname), panel$cname)]
# Some countries did not match, lets just drop 'em
sum(is.na(fdi$ccode))
fdi=na.omit(fdi)
# Reorder rows of fdi dataframe
fdi=fdi[order(fdi$ccode),]
# Now lets isolate the fdi and capdist matrix to only
# countries that exist in both objects
matches=intersect(fdi$ccode, rownames(capdist))
fdi=fdi[which(fdi$ccode %in% matches),]
capdist=capdist[matches, matches]
# Like the example above we have to invert the distance matrix
invcapdist = 1/capdist
diag(invcapdist) = 0
# Now lets Moran's test
Moran.I(fdi$fdi, invcapdist)
load("cityTotPopLatLongvFinal.rda")
prio=read.csv("ConflictSite 4-2010_v3 Dataset.csv")
fYrCty$cname = toupper( countrycode(
fYrCty$cname,"country.name","country.name") )
prio$Conflict.territory = toupper( countrycode(
prio$Conflict.territory,"country.name","country.name") )
cname="INDIA"
worldmap=cshp(date=as.Date("1990-01-01"),useGW=F)
ccode = countrycode(cname,"country.name","cown")
cntryShape = worldmap[worldmap$COWCODE==ccode,]
newprio = na.omit(prio[prio$Conflict.territory==cname,])
gpclibPermit()
ggmap = fortify(cntryShape, region = "COWCODE")
ggmapData = data.frame("id" = unique(ggmap$id))
ggmapData$id = as.numeric(as.character(ggmapData$id))
temp = ggplot(ggmapData, aes(map_id = id))
temp = temp + geom_map(map=ggmap, fill='white',
linetype=1, colour='black') + expand_limits(x = ggmap$long, y = ggmap$lat)
temp = temp + geom_point(aes(
x=fYrCty$cleanLong[fYrCty$cname==cname & fYrCty$Capital==0],
y=fYrCty$cleanLat[fYrCty$cname==cname & fYrCty$Capital==0]),
pch=17,size=4,col='darkgrey')
temp = temp + geom_point(aes(
x=fYrCty$cleanLong[fYrCty$cname==cname & fYrCty$Capital!=0],
y=fYrCty$cleanLat[fYrCty$cname==cname & fYrCty$Capital!=0]),
pch=18,size=5,col='darkgrey')
temp = temp + geom_point(aes(x=newprio$Longitude, y=newprio$Latitude,
color=newprio$Year),size=4)
temp = temp + scale_colour_gradient('',
low=brewer.pal(9,'Blues')[2],high=brewer.pal(9,'Blues')[9],
breaks=seq(min(newprio$Year),max(newprio$Year),6))
temp = temp + theme(
line=element_blank(),title=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
legend.position='top', legend.key.width=unit(4,"line"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), panel.border=element_blank())
temp
load("/Users/janus829/Dropbox/Research/caesium/data/toModel/ContagionMatrices_insRebHcountFinal.rda")
ls()
rm(list=ls())
load("/Users/janus829/Dropbox/Research/caesium/data/toModel/ContagionMatrices_insRebHcountFinal.rda")
ls()
summary(contMat)
